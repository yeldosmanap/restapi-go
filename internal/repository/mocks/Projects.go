// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go-rest-api/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Projects is an autogenerated mock type for the Projects type
type Projects struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, project
func (_m *Projects) Create(ctx context.Context, project model.Project) (string, error) {
	ret := _m.Called(ctx, project)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.Project) string); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Project) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, userId, projectId
func (_m *Projects) Delete(ctx context.Context, userId string, projectId string) error {
	ret := _m.Called(ctx, userId, projectId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Projects) GetAll(ctx context.Context) ([]model.Project, error) {
	ret := _m.Called(ctx)

	var r0 []model.Project
	if rf, ok := ret.Get(0).(func(context.Context) []model.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, userId, title
func (_m *Projects) GetByTitle(ctx context.Context, userId string, title string) (model.Project, error) {
	ret := _m.Called(ctx, userId, title)

	var r0 model.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Project); ok {
		r0 = rf(ctx, userId, title)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, userId, projectId, newTitle
func (_m *Projects) Update(ctx context.Context, userId string, projectId string, newTitle string) error {
	ret := _m.Called(ctx, userId, projectId, newTitle)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userId, projectId, newTitle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProjects interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjects creates a new instance of Projects. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjects(t mockConstructorTestingTNewProjects) *Projects {
	mock := &Projects{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
